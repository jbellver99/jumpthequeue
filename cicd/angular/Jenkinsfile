pipeline {
    agent any
    
    tools {
        nodejs "nodejs"
        maven "maven"
    }

    options{
        disableConcurrentBuilds()
    }

    environment {

        angularDir = 'angular'

        srcDir = 'angular/src'

        sonarTool = 'SonarScanner'

        sonarEnv = "SonarQube"

        dockerTool = 'docker'

        groupId = 'com.jbellver99.jumpthequeue'

        repositoryId = 'Jump-The-Queue'

        repositoryUrl = 'http://localhost:8088/repository/Jump-The-Queue/'

        globalSettingsId = 'MavenSettings'

        mavenInstallation = 'Maven3'
    }

    stages {
        stage ('Install Application') {
            steps {
                dir(angularDir) {
                    sh """npm install"""
                }
            }
        }

        stage ('SonarQube Code Analysis') {
            steps {
                script {
                    def scannerHome = tool sonarTool
                    withSonarQubeEnv(sonarEnv) {
                        sh """${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=angular \
                            -Dsonar.sources=${srcDir}
                        """
                    }
                }
            }
        }

        stage ('Build Application') {
            steps {
                dir(angularDir) {
                    sh """npm run build"""
                }
            }
        }

        stage ('Deliver Application Into Nexus') {
            steps {
                script {
                    dir(angularDir) {
                        def props = readJSON file: 'package.json'
                        sh """rm -f ${props.name}.zip"""
                        zip dir: 'dist/', zipFile: """${props.name}.zip"""
                        nexusArtifactUploader artifacts: [
                            [
                                artifactId: ${props.name}, 
                                classifier: '', 
                                file: ${props.name}.zip, 
                                type: 'zip'
                            ]
                        ], 
                            credentialsId: 'nexus', 
                            groupId: groupId, 
                            nexusUrl: nexusUrl, 
                            nexusVersion: 'nexus3', 
                            protocol: 'http', 
                            repository: repositoryId, 
                            version: ${props.version}
                    }
                }
            }
        }

        stage ('Create The Docker Image') {
            steps {
                script {
                    dir(angularDir) {
                        tool dockerTool
                        docker.withTool(dockerTool) {
                            def image = docker.build("jump-the-queue/angular")
                            sh"""docker images"""
                        }
                    }
                }
            }
        }
    }
}
